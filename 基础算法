二分算法
一、算法简介
    在有序数组中查找某一特定元素的搜索算法
二、算法模板
    int bsearch_r(int l,int r)
    {
        while(l < r)
        {
            int mid = (l + r)/2;
            if(check(mid)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    将数组[l,r]分为[l,mid]和[mid+1,r]
    
    
    int bsearch_r(int l,int r)
    {
        while(l < r)
        {
            int mid = (l + r + 1)/2;
            if(check(mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    将数组[l,r]分为[l,mid-1][mid,r]

    浮点数的二分模板
    double bsearch_r(double l,double r)
    {
        double esp = 1e - 6;
        while(r - l > eps)
        {
            double mid = (l + r)/2;
            if(check(mid)) r = mid;
            else l = mid;
        }
        return 0;
    }
    

高精度计算
（1）高精度加法
     代码模板
     vector<int> (vector<int> &A,vector<int> &B)
     {
        if(A.size() < B.size()) return add(B,A);
        
        vector<int> C;
        int t = 0;
        for(int i = 0;i < A.size();i++)
        {
            t += A[i];
            if(i < B[i]) t += B[i];
            c.push_back(t%10);
            t = t / 10;
        }
        
        if(t) C.push_back;
        return C;
     }
 
 （2）高精度减法
      先进性两个数的比较，如果为较小数减去较大数，输出符号并交换两个数的位置
      1、判断两个大数的大小
      bool cmp(vector<int> &A,vector<int> &B)
      {
            if(A.size() != B.size()) return A.size() > B.size();
            for(int i = A.size() - 1;i >= 0;i--)
            {
                if(A[i] != B[i]) return A[i] > B[i];
            }
            reutrn true;
      }
      2、高精度减法
      vector<int> sub(vector<int> &A,vector<int> &B)
      {
            vector<int> C;
            int t = 0;
            for(int i = 0;i < A.size();i++)
            {
                t = A[i] - t;
                if(i < B.size()) t -= B[i];
                C.push_back((t+10)%10);
                if(t < 0) t = 1;
                else t = 0
            }
            while(C.size() > 1 && C.back() == 0) C.pop_back();
            return C;
      }
      
  （3）高精度乘法
       代码模板
       vector<int> mul(vector<int> &A,int b)
       {
            vector<int> C;
            int t = 0;
            for(int i = 0;i < A.size() || t;i++)
            {
                if(i < A.size()) t = A[i]*b;
                C.push_back(t%10);
                t /= 10;
            }
            while(C.size()>1 && C.back()==0) C.pop_back();
            return 0;
       }
  
（4）高精度除法
     除法与其他的方法有所有不同，除法要从最高位开始进行计算，所以在顺序方面需要我们注意
     vector<int> div(vector<int> &A,int b,int &r)
     {
           vector<int> C;
           r = 0;
           for(int i = A.size();i >= 0;i--)
           {
                r = r * 10 + A[i];
                C.push_back(r/b);
                r %= b;
           }
           reverse(C.begin(),C.end());
           while(C.size() > 1 && C.back() == 0) C.pop_back();
           return 0;
     }
     
前缀和
a[l]+...+a[r] = s[r] - s[l-1]

子矩阵的和
s[i,j]为第i行j列格子左上部分所有元素的和
以(x1,y1)为左上角，(x2,y2)为右下角子矩阵和为：
s[x2,y2] - s[x1-1,y2] - s[x2,y1-1] + s[x1-1,y1-1]

差分
给区间[l,r]中每个数加上c：b[l] += c,b[r+1] -= c

差分矩阵
